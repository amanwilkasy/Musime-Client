<template>
  <v-container grid-list-lg fluid>
    <!-- <v-card>
      <br />
      <v-sheet
        class="v-sheet--offset mx-auto"
        color="grey"
        elevation="12"
        max-width="calc(100% - 32px)"
      >
        <v-sparkline
          :value="value"
          :fill="fill"
          :labels="labels"
          :key="legend"
          :gradient="gradient"
          :line-width="lineWidth"
          :padding="padding"
          :smooth="radius || false"
          :stroke-linecap="lineCap"
          :gradient-direction="gradientDirection"
          :type="type"
          :auto-line-width="autoLineWidth"
          :label-size="labelSize"
          auto-draw
        ></v-sparkline>
      </v-sheet>

      <v-card-text class="pt-0">
        <div class="title font-weight-light mb-2">Popularity</div>
      </v-card-text>
    </v-card>-->

    <v-layout row wrap>
      <v-flex lg12 md12 v-for="analyze in graph" :key="analyze.feature">
        <v-card>
          <br />
          <v-sheet
            class="v-sheet--offset mx-auto"
            color="grey"
            elevation="12"
            max-width="calc(100% - 32px)"
          >
            <v-sparkline
              :value="analyze.value"
              :fill="fill"
              :labels="analyze.labels"
              :key="legend"
              :gradient="gradient"
              :line-width="lineWidth"
              :padding="padding"
              :smooth="radius || false"
              :stroke-linecap="lineCap"
              :gradient-direction="gradientDirection"
              :type="type"
              :auto-line-width="autoLineWidth"
              :label-size="labelSize"
              auto-draw
            ></v-sparkline>
          </v-sheet>

          <v-card-text class="pt-0">
            <div class="title font-weight-light mb-2">{{analyze.feature}}</div>
          </v-card-text>
        </v-card>
      </v-flex>
    </v-layout>
  </v-container>
</template>

<script>
const features = require("~/static/allaudiofeatures.json");
import { GChart } from "vue-google-charts";
const gradients = [
  ["#222"],
  ["#42b3f4"],
  ["red", "orange", "yellow"],
  ["purple", "violet"],
  ["#00c6ff", "#F0F", "#FF0"],
  ["#f72047", "#ffd200", "#1feaea"]
];
export default {
  data: () => ({
    graph: [
      {
        feature: "getPopularityMap",
        labels: ["2", "12", "21", "30", "39", "48", "57", "66", "75", "85"],
        value: [19, 45, 94, 203, 363, 529, 406, 208, 90, 11]
      },
      {
        feature: "getEnergyMap",
        labels: ["6", "27", "36", "45", "54", "63", "72", "81", "90", "99"],
        value: [12, 52, 112, 209, 273, 373, 364, 312, 213, 23]
      },
      {
        feature: "getInstrumentalnessMap",
        labels: ["0", "10", "20", "30", "40", "50", "60", "70", "80", "90"],
        value: [2237, 91, 50, 45, 41, 56, 64, 66, 89, 75]
      },
      {
        feature: "getKeyMap",
        labels: ["0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11"],
        value: [350, 464, 246, 98, 228, 294, 294, 344, 348, 294, 238, 304]
      },
      {
        feature: "getLivenessMap",
        labels: ["2", "12", "22", "32", "42", "52", "62", "72", "85"],
        value: [696, 630, 249, 185, 56, 54, 43, 22, 15]
      },
      {
        feature: "getLoudnessMap",
        labels: [
          "-5",
          "299",
          "411",
          "514",
          "611",
          "710",
          "811",
          "926",
          "1093",
          "1672"
        ],
        value: [127, 199, 269, 285, 278, 196, 167, 132, 112, 5]
      },
      {
        feature: "getSpeechinessMap",
        labels: ["0", "8", "14", "20", "26", "32", "38", "44", "51", "59"],
        value: [874, 442, 214, 138, 101, 100, 55, 20, 12, 3]
      },
      {
        feature: "getValenceMap",
        labels: ["0", "12", "22", "32", "42", "52", "62", "72", "82", "92"],
        value: [222, 344, 286, 297, 256, 223, 146, 88, 42, 29]
      },
      {
        feature: "getTempoMap",
        labels: [
          "0",
          "77",
          "92",
          "107",
          "122",
          "137",
          "152",
          "167",
          "184",
          "219"
        ],
        value: [84, 196, 316, 278, 283, 384, 153, 111, 25, 3]
      },
      {
        feature: "getDurationMsMap",
        labels: [
          "1464",
          "1731",
          "1888",
          "2039",
          "2048",
          "2194",
          "2347",
          "2531",
          "2761"
        ],
        value: [159, 196, 252, 18, 239, 220, 207, 159, 132]
      },
      {
        feature: "getTimeSignatureMap",
        labels: ["0", "1", "3", "4", "5"],
        value: [2, 10, 86, 3332, 72]
      },
      {
        feature: "getAcousticnessMap",
        labels: ["0", "10", "20", "30", "40", "50", "60", "71", "82", "92"],
        value: [1253, 294, 182, 109, 81, 52, 39, 37, 28, 13]
      },
      {
        feature: "getDanceabilityMap",
        labels: ["0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "10"],
        value: [2, 4, 38, 110, 266, 598, 936, 886, 506, 146, 10]
      }
    ],
    legend: "Popularity",
    gradientDirection: "top",
    gradients,
    fill: true,
    type: "trend",
    autoLineWidth: false,
    lineWidth: 2,
    labelSize: 7,
    radius: 5,
    padding: 16,
    lineCap: "round",
    gradient: gradients[5]
  }),
  created() {},
  components: {},
  methods: {},
  computed: {}
};
</script>

<template>
  <v-container grid-list-lg fluid>
    <h1>asdfsdaf</h1>
    <v-btn @click="login">Login</v-btn>
    <v-btn @click="getUserGraphFeatures">load graphs</v-btn>

    <v-layout row wrap>
      <v-flex lg12 md12 v-for="analyze in graph" :key="analyze.feature">
        <v-card>
          <br />
          <v-sheet
            class="v-sheet--offset mx-auto"
            color="cyan"
            elevation="12"
            max-width="calc(100% - 32px)"
          >
            <v-sparkline
              :value="analyze.values"
              :fill="fill"
              :labels="analyze.labels"
              :key="legend"
              :gradient="gradient"
              :line-width="lineWidth"
              :padding="padding"
              :smooth="radius || false"
              :stroke-linecap="lineCap"
              :gradient-direction="gradientDirection"
              :type="type"
              :auto-line-width="autoLineWidth"
              :label-size="labelSize"
              auto-draw
            ></v-sparkline>
          </v-sheet>

          <v-card-text class="pt-0">
            <div class="title font-weight-light mb-2">{{analyze.feature}}</div>
          </v-card-text>
        </v-card>
      </v-flex>
    </v-layout>
  </v-container>
</template>

<script>
const base = "http://e520bd15.ngrok.io/";
const api = base + "api/";
const getUserGraphFeaturesUrl = api + "getUserGraphFeatures";
const loginUrl = base + "spotify-auth/login";
const checkHasFeatureGraphUrl = api + "checkIfGraphExists";

const gradients = [
  ["#222"],
  ["#42b3f4"],
  ["red", "orange", "yellow"],
  ["purple", "violet"],
  ["#00c6ff", "#F0F", "#FF0"],
  ["#f72047", "#ffd200", "#1feaea"]
];
export default {
  data: () => ({
    graph: [],
    legend: "Popularity",
    gradientDirection: "top",
    gradients,
    fill: true,
    type: "trend",
    autoLineWidth: false,
    lineWidth: 2,
    labelSize: 7,
    radius: 5,
    padding: 16,
    lineCap: "round",
    gradient: gradients[5]
  }),
  created() {
    this.getUserGraphFeatures();
  },
  components: {},
  methods: {
    getUserGraphFeatures() {
      this.$axios
        .get(getUserGraphFeaturesUrl)
        .then(res => {
          this.graph = res.data;
          console.log(res.data);
        })
        .catch(error => console.log(error.message));
    },
    login() {
      this.$axios
        .get(loginUrl)
        .then(res => {
          var successWindow = window.open(res.data, "_blank");
          setTimeout(() => successWindow.close(), 3000);
        })
        .catch(error => console.log(error.message));
    },
    checkIfGraphExists() {
      this.$axios
        .get(checkHasFeatureGraphUrl)
        .then(res => {})
        .catch(error => console.log(error.message));
    }
  },
  computed: {}
};
</script>
